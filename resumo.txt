BACK-END:
<?php

session_set_cookie_params(0);

$telefoneLoja = "19987654321";
$nomeLoja = "NomeDaLoja_";

$telefoneHash = hash('sha256', $telefoneLoja);

$nomeSessao = $nomeLoja . $telefoneHash;

session_name($nomeSessao);

ini_set('session.cookie_httponly', 1);
ini_set('session.cookie_secure', isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on');

if (session_status() === PHP_SESSION_NONE) {
  session_start();
}

$dominios_permitidos = [
  'https://agapesi.ddns.com.br',
  'http://localhost'
];

$origem = isset($_SERVER['HTTP_ORIGIN']) ? $_SERVER['HTTP_ORIGIN'] : '';

if (in_array($origem, $dominios_permitidos)) {
  header('Access-Control-Allow-Origin: ' . $origem);
}

header('Cache-Control: no-cache, no-store, must-revalidate');
header('Pragma: no-cache');
header('Expires: 0');

header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With');

header('Content-Type: application/json');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
  http_response_code(204);
  exit;
}

date_default_timezone_set('America/Fortaleza');

//====================================================================//

<?php

require_once 'session_init.php';
require_once 'Conexao.php';
require_once 'Empresa.php';
require_once 'Utilidades.php';

if (!isset($_SESSION['usuario'])) {
  $_SESSION['usuario'] = [
    'id' => null,
    'nome' => null,
    'telefone' => null,
    'origem' => null,
    'inicio' => null,
  ];
  $_SESSION['carrinho'] = [];
  $_SESSION['produto_selecionado'] = null;
  $_SESSION['pedido_finalizacao'] = null;
}

$resposta = ['status' => 'erro'];

if (isset($_GET['tel'])) {

  function DecryptString($valor)
  {
    $chave = 10;
    $retorno = "";
    $valor_decodificado = utf8_decode($valor);

    for ($i = 0; $i < strlen($valor_decodificado); $i++) {
      $retorno .= chr(~(ord($valor_decodificado[$i]) - $chave));
    }
    return $retorno;
  }

  $fone_criptografado = $_GET['tel'];
  $fone = DecryptString($fone_criptografado);

  if (strlen($fone) >= 11 && strlen($fone) <= 14) {

    $_SESSION['usuario']['telefone'] = $fone;
    $_SESSION['usuario']['origem'] = 'W';
    $_SESSION['usuario']['inicio'] = date("H:i:s");

    $resposta['status'] = 'ok';
  }
} elseif (isset($_GET['mesa'])) {

  $mesa = $_GET['mesa'];

  $_SESSION['usuario']['origem'] = 'M';
  $_SESSION['usuario']['telefone'] = $mesa;
  $_SESSION['usuario']['inicio'] = date("H:i:s");

  $resposta['status'] = 'ok';
}

echo json_encode($resposta);
exit;

//====================================================================//

<?php

require_once 'session_init.php';

require_once 'Conexao.php';

class Empresa
{
  private $conexao;

  public function __construct()
  {
    try {
      $this->conexao = Conexao::instancia();
    } catch (Exception $e) {
      throw new Exception("Erro de conexão com o banco de dados.");
    }
  }

  //===========================================================================================

  public function pegarDadosDaEmpresa()
  {
    try {
      $sqlEmpresa = "SELECT * FROM empresa";
      $stmtEmpresa = $this->conexao->prepare($sqlEmpresa);
      $stmtEmpresa->execute();

      $dadosEmpresa = $stmtEmpresa->fetch(PDO::FETCH_ASSOC);
      if (!$dadosEmpresa) {
        $dadosEmpresa = [];
      }

      $sqlParametros = "SELECT * FROM parametros WHERE id = 1";
      $stmtParametros = $this->conexao->prepare($sqlParametros);
      $stmtParametros->execute();

      $dadosParametros = $stmtParametros->fetch(PDO::FETCH_ASSOC);
      if (!$dadosParametros) {
        $dadosParametros = [];
      }

      $dadosCompletos = [
        'empresa' => $dadosEmpresa,
        'parametros' => $dadosParametros
      ];

      return $dadosCompletos;
    } catch (PDOException $e) {
      error_log("Erro ao buscar dados da empresa: " . $e->getMessage());
      return [];
    }
  }

  //===========================================================================================

  public function pegarHorariosDaEmpresa()
  {
    try {
      $sql = "SELECT * FROM horarios";

      $stmt = $this->conexao->prepare($sql);
      $stmt->execute();

      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      error_log("Erro ao buscar horários: " . $e->getMessage());
      return [];
    }
  }

  //===========================================================================================

  public function cidadesOndeEntrega()
  {
    try {
      $sql = "SELECT Codigo, Descricao FROM cidades WHERE excluido = 'N' ORDER BY Descricao ASC";

      $stmt = $this->conexao->prepare($sql);
      $stmt->execute();

      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      error_log("Erro ao buscar cidades de entrega: " . $e->getMessage());
      return [];
    }
  }

  //===========================================================================================

  public function pegarHorariosDeFuncionamento()
  {
    try {
      date_default_timezone_set('America/Fortaleza');
      $day = strtoupper(date('D'));

      $sql = "SELECT horarios.*, 
      parametros.aberto, parametros.txentrega, 
      parametros.tempoentrega, parametros.ativaentrega
      FROM horarios INNER JOIN parametros ON (horarios.idParam = parametros.id)
      WHERE horarios.dia = :day";

      $stmt = $this->conexao->prepare($sql);
      $stmt->bindParam(':day', $day);
      $stmt->execute();

      $dados = $stmt->fetch(PDO::FETCH_ASSOC);

      if (!$dados) {
        return ['status' => 'fechado', 'motivo' => 'Nenhum horário configurado para hoje.'];
      }

      $abertoManualmente = $dados['aberto'] == 'S';
      $horaAtual = date("H:i:s");

      $estaAberto = false;
      if ($dados['fechamento'] < $dados['abertura']) {
        if ($horaAtual >= $dados['abertura'] || $horaAtual <= $dados['fechamento']) {
          $estaAberto = true;
        }
      } else {
        if ($horaAtual >= $dados['abertura'] && $horaAtual <= $dados['fechamento']) {
          $estaAberto = true;
        }
      }

      $status = $estaAberto && $abertoManualmente ? 'aberto' : 'fechado';

      return [
        'status' => $status,
        'tempo_preparo' => $dados['tempoentrega'],
        'taxa_entrega' => $dados['txentrega'],
        'entrega_ativa' => $dados['ativaentrega']
      ];
    } catch (PDOException $e) {
      error_log("Erro ao verificar status da loja: " . $e->getMessage());
      return ['status' => 'erro', 'motivo' => 'Erro interno do servidor.'];
    }
  }

  //================================================================================

  public function mudarStatusDaLoja($novoStatus)
  {
    try {
      $sql = "UPDATE parametros SET aberto = :novoStatus WHERE id = 1";

      $stmt = $this->conexao->prepare($sql);
      $stmt->bindParam(':novoStatus', $novoStatus, PDO::PARAM_STR);

      return $stmt->execute();
    } catch (PDOException $e) {
      error_log("Erro ao mudar status da loja: " . $e->getMessage());
      return false;
    }
  }
}

//================================================================================

<?php

require_once 'session_init.php';

require_once 'Conexao.php';

class Produtos
{
  private $conexao;

  public function __construct()
  {
    try {
      $this->conexao = Conexao::instancia();
    } catch (Exception $e) {
      throw new Exception("Erro de conexão com o banco de dados.");
    }
  }

  //===============================================================================

  public function pegarTodosOsProdutos()
  {
    try {
      $sql = "SELECT grupo.Descricao AS Grupo,grupo.FecharCozinha,categorias.descricao
              AS categoria, categorias.pizza, mercadorias.* FROM mercadorias INNER JOIN grupo
              ON (mercadorias.idgrupo = grupo.Codigo)
              INNER JOIN categorias ON (grupo.idcategoria = categorias.id)
              WHERE complemento = 'N' AND mercadorias.ativo = 'S' AND mercadorias.ComplementoBorda = 'N'
              AND mercadorias.delivery = 'S' ORDER BY categorias.Ordem ASC";

      $stmt = $this->conexao->prepare($sql);
      $stmt->execute();

      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      error_log("Erro ao listar produtos: " . $e->getMessage());
      return [];
    }
  }

  //===============================================================================

  public function pegarCategorias()
  {
    try {
      $sql = "SELECT id, descricao, pizza, excluido, ativo FROM categorias WHERE ativo = 'S' AND excluido = 'N'";

      $stmt = $this->conexao->prepare($sql);
      $stmt->execute();

      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      error_log("Erro ao listar produtos: " . $e->getMessage());
      return [];
    }
  }

  //===============================================================================

  public function pegarComplementos($codigos)
  {
    try {
      $codigosArray = explode(',', $codigos);

      $placeholders = [];
      for ($i = 0; $i < count($codigosArray); $i++) {
        $placeholders[] = "FIND_IN_SET(:codigo{$i}, mercadorias.ComplementoCod)";
      }
      $whereClause = implode(' OR ', $placeholders);

      $sql = "SELECT mercadorias.*, grupo.Descricao AS Grupo, grupocomp.id AS IDGrupoComp
                FROM mercadorias INNER JOIN grupo ON mercadorias.idgrupo = grupo.Codigo
                INNER JOIN grupocomp ON grupocomp.id = mercadorias.ComplementoCod
                WHERE {$whereClause}
                AND Complemento = 'S' AND Ativo = 'S' ORDER BY (mercadorias.Venda = 0)
                DESC, grupo.Ordem, mercadorias.Ordem";

      $stmt = $this->conexao->prepare($sql);

      foreach ($codigosArray as $index => $cod) {
        $stmt->bindParam(":codigo{$index}", $cod, PDO::PARAM_INT);
      }

      $stmt->execute();

      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      error_log("Erro ao listar complementos: " . $e->getMessage());
      return [];
    }
  }

  //===============================================================================

  public function pegarDetalhesDosProdutos($codigo)
  {
    try {
      $sql = "SELECT
              grupo.Descricao AS Grupo, grupo.TextoAdicional, 
              grupo.AtivaTextoAdicional AS adicional, categorias.pizza, 
              categorias.descricao AS categoria, mercadorias.*
              FROM mercadorias INNER JOIN grupo ON (mercadorias.idgrupo = grupo.Codigo)
              INNER JOIN categorias ON (grupo.idcategoria = categorias.id)
              WHERE mercadorias.Codigo = :codigo AND mercadorias.ativo = 'S'";

      $stmt = $this->conexao->prepare($sql);
      $stmt->bindParam(':codigo', $codigo, PDO::PARAM_INT);
      $stmt->execute();

      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      error_log("Erro ao buscar detalhes do produto: " . $e->getMessage());
      return [];
    }
  }

  //===============================================================================

  public function pegarTamanhosDosProdutos($codigo)
  {
    try {
      $sql = "SELECT * FROM tamanhos WHERE CodMerc = :codigo";

      $stmt = $this->conexao->prepare($sql);
      $stmt->bindParam(':codigo', $codigo, PDO::PARAM_INT);
      $stmt->execute();

      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      error_log("Erro ao buscar tamanhos: " . $e->getMessage());
      return [];
    }
  }

  //===============================================================================

  public function pegarSaboresDosProdutos($codigo)
  {
    try {
      $sql = "SELECT * FROM sabores WHERE idMerc = :codigo";

      $stmt = $this->conexao->prepare($sql);
      $stmt->bindParam(':codigo', $codigo, PDO::PARAM_INT);
      $stmt->execute();

      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      error_log("Erro ao buscar sabores: " . $e->getMessage());
      return [];
    }
  }

  //===============================================================================

  public function pegarIngredientesDosProdutos($codigo)
  {
    try {
      $sql = "SELECT ingredientes FROM mercadorias WHERE Codigo = :codigo";

      $stmt = $this->conexao->prepare($sql);
      $stmt->bindParam(':codigo', $codigo, PDO::PARAM_INT);
      $stmt->execute();

      $resultado = $stmt->fetch(PDO::FETCH_ASSOC);
      return $resultado ? $resultado['ingredientes'] : '';
    } catch (PDOException $e) {
      error_log("Erro ao buscar ingredientes: " . $e->getMessage());
      return '';
    }
  }

  //===============================================================================

  public function pegarBordas()
  {
    try {
      $sql = "SELECT Codigo, Descricao, Venda
              FROM mercadorias WHERE ComplementoBorda = 'S' AND ativo = 'S'";

      $stmt = $this->conexao->prepare($sql);
      $stmt->execute();

      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      error_log("Erro ao buscar bordas: " . $e->getMessage());
      return [];
    }
  }

  //===============================================================================

  public function pegarPedidosAnteriores($fone)
  {
    try {
      $sql = "SELECT `Data`, Hora, totalpedido, Codigo 
              FROM vendas WHERE telefone = :fone ORDER BY Codigo DESC";

      $stmt = $this->conexao->prepare($sql);
      $stmt->bindParam(':fone', $fone, PDO::PARAM_STR);
      $stmt->execute();

      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      error_log("Erro ao buscar pedidos antigos: " . $e->getMessage());
      return [];
    }
  }

  //===============================================================================

  public function pegarDetalhesPedidosAnteriores($cod)
  {
    try {
      $sqlItens = "SELECT * FROM vendasdet WHERE CodVenda = :cod";
      $stmtItens = $this->conexao->prepare($sqlItens);
      $stmtItens->bindParam(':cod', $cod, PDO::PARAM_INT);
      $stmtItens->execute();
      $itens = $stmtItens->fetchAll(PDO::FETCH_ASSOC);

      $itensAgrupados = [];
      foreach ($itens as $item) {
        $itensAgrupados[$item['Codigo']] = $item;
        $itensAgrupados[$item['Codigo']]['Complementos'] = [];
      }

      if (!empty($itensAgrupados)) {
        $idsItens = array_keys($itensAgrupados);
        $placeholders = implode(',', array_fill(0, count($idsItens), '?'));

        $sqlComplementos = "SELECT vendasdetcomp.*, mercadorias.Complemento, mercadorias.Descricao AS DescricaoComp
                            FROM vendasdetcomp JOIN mercadorias ON vendasdetcomp.idProdComp = mercadorias.Codigo
                            WHERE vendasdetcomp.idVendasDet IN ($placeholders)";

        $stmtComplementos = $this->conexao->prepare($sqlComplementos);
        foreach ($idsItens as $k => $id) {
          $stmtComplementos->bindValue(($k + 1), $id, PDO::PARAM_INT);
        }
        $stmtComplementos->execute();
        $complementos = $stmtComplementos->fetchAll(PDO::FETCH_ASSOC);

        foreach ($complementos as $comp) {
          $idItem = $comp['idVendasDet'];
          if (isset($itensAgrupados[$idItem])) {
            $itensAgrupados[$idItem]['Complementos'][] = $comp;
          }
        }
      }

      $sqlTaxa = "SELECT `Data`, Hora, TaxaTransp, totalpedido FROM vendas WHERE Codigo = :cod";
      $stmtTaxa = $this->conexao->prepare($sqlTaxa);
      $stmtTaxa->bindParam(':cod', $cod, PDO::PARAM_INT);
      $stmtTaxa->execute();
      $taxa = $stmtTaxa->fetch(PDO::FETCH_ASSOC);

      $arrayFinal = array_values($itensAgrupados);
      if ($taxa) {
        $arrayFinal[] = $taxa;
      }

      return $arrayFinal;
    } catch (PDOException $e) {
      error_log("Erro ao buscar detalhes de pedidos: " . $e->getMessage());
      return [];
    }
  }
}

//================================================================================

<?php

require_once 'session_init.php';
require_once 'Conexao.php';

class Utilidades
{
  private $conexao;

  public function __construct()
  {
    try {
      $this->conexao = Conexao::instancia();
    } catch (Exception $e) {
      die("Não foi possível conectar ao banco de dados: " . $e->getMessage());
    }
  }

  //===========================================================================

  public function estaLogado()
  {
    return isset($_SESSION['fone']);
  }

  //===========================================================================

  public function pegarMeusEnderecos($fone)
  {
    try {
      $sql = "SELECT DISTINCT endereco, numero, bairro FROM vendas WHERE telefone = :fone";

      $stmt = $this->conexao->prepare($sql);
      $stmt->bindParam(':fone', $fone, PDO::PARAM_STR);
      $stmt->execute();

      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      error_log("Erro ao buscar endereços: " . $e->getMessage());
      return [];
    }
  }

  //===========================================================================

  public function fecharMesaSeNecessario($mesa)
  {
    try {
      $sql = "SELECT Fechado FROM mesas WHERE Mesa = :mesa";
      $stmt = $this->conexao->prepare($sql);
      $stmt->bindParam(':mesa', $mesa, PDO::PARAM_INT);
      $stmt->execute();
      $dados = $stmt->fetch(PDO::FETCH_ASSOC);

      if (isset($dados['Fechado']) && $dados['Fechado'] == 'S') {
        $upt = $this->conexao->prepare("UPDATE mesas SET Fechado = 'N' WHERE mesa = :mesa");
        $upt->bindParam(':mesa', $mesa, PDO::PARAM_INT);
        return $upt->execute();
      }
      return false;
    } catch (PDOException $e) {
      error_log("Erro ao fechar mesa: " . $e->getMessage());
      return false;
    }
  }

  //===========================================================================

  public function exigeNomeQRCode()
  {
    try {
      $sql = "SELECT qrcodecomnome FROM parametros";
      $stmt = $this->conexao->prepare($sql);
      $stmt->execute();
      $resultado = $stmt->fetch(PDO::FETCH_ASSOC);

      return isset($resultado['qrcodecomnome']) && $resultado['qrcodecomnome'] == 'S';
    } catch (PDOException $e) {
      error_log("Erro ao verificar exigência de nome: " . $e->getMessage());
      return false;
    }
  }

  //===========================================================================

  public function recuperarNomeImagem($produto)
  {
    try {
      $sql = "SELECT imagem FROM mercadorias WHERE Codigo = :produto";
      $stmt = $this->conexao->prepare($sql);
      $stmt->bindParam(':produto', $produto, PDO::PARAM_INT);
      $stmt->execute();

      $dados = $stmt->fetch(PDO::FETCH_ASSOC);

      if (isset($dados['imagem'])) {
        return $dados['imagem'];
      }

      return null;
    } catch (PDOException $e) {
      error_log("Erro ao buscar imagem: " . $e->getMessage());
      return null;
    }
  }


  public function pegarTaxaPorBairro($bairroSelecionado, $taxaFixaEmpresa)
  {
    try {
      $sql = "SELECT taxa FROM bairros WHERE nome = :bairro LIMIT 1";
      $stmt = $this->conexao->prepare($sql);
      $stmt->bindParam(':bairro', $bairroSelecionado, PDO::PARAM_STR);
      $stmt->execute();
      $result = $stmt->fetch(PDO::FETCH_ASSOC);

      if ($result && isset($result['taxa']) && floatval($result['taxa']) > 0) {
        return floatval($result['taxa']);
      } else {
        return floatval($taxaFixaEmpresa);
      }
    } catch (PDOException $e) {
      error_log("Erro ao verificar taxa do bairro: " . $e->getMessage());
      return floatval($taxaFixaEmpresa);
    }
  }
}

//===========================================================================

<?php

ob_start();

require_once 'session_init.php';
require_once 'Conexao.php';
require_once 'Empresa.php';
require_once 'Produtos.php';
require_once 'Utilidades.php';

try {
  $metodo = $_SERVER['REQUEST_METHOD'];
  $recurso = isset($_GET['recurso']) ? $_GET['recurso'] : null;
  $dados = [];
  $response_code = 200;

  if ($metodo === 'GET') {
    switch ($recurso) {
      case 'empresa':
        $empresa = new Empresa();
        $dados = $empresa->pegarDadosDaEmpresa();
        break;
      case 'horarios':
        $empresa = new Empresa();
        $dados = $empresa->pegarHorariosDaEmpresa();
        break;
      case 'produtos':
        $produtos = new Produtos();
        $dados = $produtos->pegarTodosOsProdutos();
        break;
      case 'categorias':
        $produtos = new Produtos();
        $dados = $produtos->pegarCategorias();
        break;
      case 'complementos':
        $codigos = isset($_GET['codigos']) ? $_GET['codigos'] : null;
        if ($codigos) {
          $produtos = new Produtos();
          $dados = $produtos->pegarComplementos($codigos);
        } else {
          $response_code = 400;
          $dados = ['message' => 'Códigos de complemento não especificados.'];
        }
        break;
      case 'detalhes-produtos':
        $cod = isset($_GET['cod']) ? $_GET['cod'] : null;
        if ($cod) {
          $produtos = new Produtos();
          $dados = $produtos->pegarDetalhesDosProdutos($cod);
        } else {
          $response_code = 400;
          $dados = ['message' => 'Código do produto não especificado.'];
        }
        break;
      case 'tamanhos':
        $cod = isset($_GET['cod']) ? $_GET['cod'] : null;
        if ($cod) {
          $produtos = new Produtos();
          $dados = $produtos->pegarTamanhosDosProdutos($cod);
        } else {
          $response_code = 400;
          $dados = ['message' => 'Código do produto não especificado.'];
        }
        break;
      case 'sabores':
        $cod = isset($_GET['cod']) ? $_GET['cod'] : null;
        if ($cod) {
          $produtos = new Produtos();
          $dados = $produtos->pegarSaboresDosProdutos($cod);
        } else {
          $response_code = 400;
          $dados = ['message' => 'Código do produto não especificado.'];
        }
        break;
      case 'ingredientes':
        $cod = isset($_GET['cod']) ? $_GET['cod'] : null;
        if ($cod) {
          $produtos = new Produtos();
          $ingredientes = $produtos->pegarIngredientesDosProdutos($cod);
          $dados = ['ingredientes' => $ingredientes];
        } else {
          $response_code = 400;
          $dados = ['message' => 'Código do produto não especificado.'];
        }
        break;
      case 'bordas':
        $produtos = new Produtos();
        $dados = $produtos->pegarBordas();
        break;
      case 'pedidos-anteriores':
        $fone = isset($_GET['fone']) ? $_GET['fone'] : null;
        if ($fone) {
          $produtos = new Produtos();
          $dados = $produtos->pegarPedidosAnteriores($fone);
        } else {
          $response_code = 400;
          $dados = ['message' => 'Telefone não especificado.'];
        }
        break;
      case 'detalhes-pedidos-anteriores':
        $cod = isset($_GET['codigo']) ? $_GET['codigo'] : null;
        if ($cod) {
          $produtos = new Produtos();
          $dados = $produtos->pegarDetalhesPedidosAnteriores($cod);
        } else {
          $response_code = 400;
          $dados = ['message' => 'Código do pedido não especificado.'];
        }
        break;
      case 'produto-selecionado':
        $dados = isset($_SESSION['produto_selecionado']) ? $_SESSION['produto_selecionado'] : null;
        break;
      case 'pegar-carrinho':
        $dados = isset($_SESSION['carrinho']) ? $_SESSION['carrinho'] : [];
        break;
      case 'usuario-logado':
        $dados = (isset($_SESSION['usuario']['telefone']) && !empty($_SESSION['usuario']['telefone'])) ? $_SESSION['usuario'] : null;
        break;
      case 'dados-sessao':
        $dados = isset($_SESSION) ? $_SESSION : [];
        break;
      case 'pegar-pedido-finalizacao':
        $dados = isset($_SESSION['pedido_finalizacao']) ? $_SESSION['pedido_finalizacao'] : null;
        if (!$dados) {
          $response_code = 404;
          $dados = ['message' => 'Nenhum pedido encontrado na sessão.'];
        }
        break;
      case 'taxa-entrega':
        $json_payload = file_get_contents('php://input');
        $payload = json_decode($json_payload, true);
        if (isset($payload['bairro']) && !empty($payload['bairro'])) {
          $util = new Utilidades();
          $empresa = new Empresa();
          $parametros = $empresa->pegarDadosDaEmpresa();
          $taxaFixa = isset($parametros['taxaentrega']) ? $parametros['taxaentrega'] : 0;
          $taxa = $util->pegarTaxaPorBairro($payload['bairro'], $taxaFixa);
          $dados = ['taxa' => $taxa];
        } else {
          $response_code = 400;
          $dados = ['message' => 'Bairro não informado.'];
        }
        break;
      default:
        $response_code = 400;
        $dados = ['message' => 'Recurso GET não especificado.'];
    }
  } elseif ($metodo === 'POST') {
    switch ($recurso) {
      case 'selecionar-produto':
        $json_payload = file_get_contents('php://input');
        $payload = json_decode($json_payload, true);
        if (isset($payload['produto']) && isset($payload['descricao'])) {
          $_SESSION['produto_selecionado'] = $payload;
          $dados = ['message' => 'Dados do produto armazenados na sessão.'];
        } else {
          $response_code = 400;
          $dados = ['message' => 'Dados do produto inválidos.'];
        }
        break;
      case 'adicionar-ao-carrinho':
        $json_payload = file_get_contents('php://input');
        $payload = json_decode($json_payload, true);

        if (isset($payload) && !empty($payload)) {
          if (!isset($_SESSION['carrinho']) || !is_array($_SESSION['carrinho'])) {
            $_SESSION['carrinho'] = [];
          }
          if (isset($payload['editarIndex'])) {
            $_SESSION['carrinho'][$payload['editarIndex']] = $payload;
            unset($_SESSION['carrinho'][$payload['editarIndex']]['editarIndex']);
            $dados = ['message' => 'Item editado com sucesso.'];
          } else {
            $_SESSION['carrinho'][] = $payload;
            $dados = ['message' => 'Produto adicionado ao carrinho.'];
          }
        } else {
          $response_code = 400;
          $dados = ['message' => 'Dados do produto inválidos para o carrinho.'];
        }
        break;
      case 'limpar-pedido':
        $_SESSION['carrinho'] = [];
        $_SESSION['produto_selecionado'] = null;
        $_SESSION['pedido_finalizacao'] = null;
        $dados = ['message' => 'Todos os dados do pedido foram limpos.'];
        break;
      case 'remover-item-carrinho':
        $json_payload = file_get_contents('php://input');
        $payload = json_decode($json_payload, true);
        if (isset($payload['index'])) {
          $index = $payload['index'];
          if (isset($_SESSION['carrinho'][$index])) {
            array_splice($_SESSION['carrinho'], $index, 1);
            $dados = ['message' => 'Produto removido do carrinho.'];
            if (isset($_SESSION['pedido_finalizacao'])) {
              $subtotal = 0;
              foreach ($_SESSION['carrinho'] as $item) {
                $subtotal += $item['total'];
              }
              $_SESSION['pedido_finalizacao']['carrinho'] = $_SESSION['carrinho'];
              $_SESSION['pedido_finalizacao']['subtotal'] = number_format($subtotal, 2, '.', '');
            }
          } else {
            $dados = ['message' => 'Índice do produto inválido.'];
          }
        } else {
          $response_code = 400;
          $dados = ['message' => 'Índice do produto não especificado.'];
        }
        break;
      case 'salvar-pedido-sessao':
        $json_payload = file_get_contents('php://input');
        $payload = json_decode($json_payload, true);
        if (isset($payload['carrinho']) && isset($payload['subtotal'])) {
          $_SESSION['pedido_finalizacao'] = [
            'carrinho' => $payload['carrinho'],
            'subtotal' => $payload['subtotal']
          ];
          $dados = ['message' => 'Pedido salvo na sessão para finalização.', 'sucesso' => true];
        } else {
          $response_code = 400;
          $dados = ['message' => 'Dados de carrinho ou subtotal ausentes.', 'sucesso' => false];
        }
        break;
      default:
        $response_code = 400;
        $dados = ['message' => 'Recurso POST não especificado.'];
    }
  } else {
    $response_code = 405;
    $dados = ['message' => 'Método não permitido.'];
  }

  http_response_code($response_code);
  echo json_encode($dados);
} catch (Exception $e) {
  http_response_code(500);
  error_log("Erro na API: " . $e->getMessage());
  echo json_encode(['message' => 'Ocorreu um erro interno.']);
}

ob_end_flush();
exit;

//===========================================================================

FRONT-END:
<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="./css/global.css" />
    <link rel="stylesheet" href="./css/validate.css" />
    <title>VALIDAÇÃO E AUTENTICAÇÃO</title>
  </head>
  <body>
    <div id="container">
      <img id="logo" src="./images/logo.png" alt="logo empresa" />
      <img id="loading" src="./images/loading.gif" alt="Loading" />
      <h2>Seja Bem-vindo!!!</h2>
    </div>

    <script>
      const pegarParametroUrl = (nome) => {
        nome = nome.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        const regex = new RegExp("[\\?&]" + nome + "=([^&#]*)");
        const resultados = regex.exec(location.search);
        return resultados === null
          ? ""
          : decodeURIComponent(resultados[1].replace(/\+/g, " "));
      };

      const telefoneUrl = pegarParametroUrl("tel");
      const mesaUrl = pegarParametroUrl("mesa");
      let urlRequisicao = "controller/validate.php";

      if (telefoneUrl) {
        urlRequisicao += "?tel=" + encodeURIComponent(telefoneUrl);
      } else if (mesaUrl) {
        urlRequisicao += "?mesa=" + encodeURIComponent(mesaUrl);
      }

      fetch(urlRequisicao)
        .then((resposta) => resposta.json())
        .then((dados) => {
          if (dados.status === "ok") {
            setTimeout(() => {
              window.location.href = "index.html";
            }, 3200);
          } else {
            setTimeout(() => {
              window.location.href = "https://agapesi.ddns.com.br/";
            }, 3200);
          }
        })
        .catch((erro) => {
          console.error("Erro na requisição:", erro);
          window.location.href = "erro.html";
        });
    </script>
  </body>
</html>

//===========================================================================

<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="./fontawesome/css/all.min.css" />
    <link rel="stylesheet" href="./css/global.css" />
    <link rel="stylesheet" href="./css/index.css" />
    <script src="./javascript/sweetalert2.all.min.js"></script>
    <script type="module" src="./javascript/app.js" defer></script>
    <script type="module" src="./javascript/alpine.min.js" defer></script>
    <title></title>
  </head>
  <body>
    <header
      id="topo"
      x-data="{ 
    images: ['images/banner.png', 'images/empresa.jpg'], 
    currentIndex: 0, 
    intervalId: null
  }"
      x-init="
    intervalId = setInterval(() => {
      currentIndex = (currentIndex + 1) % images.length;
    }, 4000) 
  "
    >
      <img
        id="carrossel-imagem"
        x-bind:src="images[currentIndex]"
        alt="Fundo de lanchonete"
      />

      <button
        class="carousel-button prev"
        @click="
      currentIndex = (currentIndex > 0) ? currentIndex - 1 : images.length - 1;
      clearInterval(intervalId);
      intervalId = setInterval(() => { currentIndex = (currentIndex + 1) % images.length; }, 5000);
    "
      >
        <i class="fa-solid fa-less-than"></i>
      </button>

      <button
        class="carousel-button next"
        @click="
      currentIndex = (currentIndex < images.length - 1) ? currentIndex + 1 : 0;
      clearInterval(intervalId);
      intervalId = setInterval(() => { currentIndex = (currentIndex + 1) % images.length; }, 5000);
    "
      >
        <i class="fa-solid fa-greater-than"></i>
      </button>
    </header>
    <img id="logo-empresa" src="./images/logo.png" alt="logo empresa" />
    <main>
      <section id="informacoes">
        <h2 id="titulo-empresa"></h2>
        <div class="info cidade">
          <i class="fa-solid fa-map-location-dot"></i>
          <h4 id="cidade-empresa"></h4>
        </div>
        <div class="info status">
          <span></span><span>RETIRAR | ENTREGAR</span><span></span>
        </div>
        <a href="./images/video.mp4" class="aprendanavegar"
          >COMO UTILIZAR O SISTEMA <i class="fas fa-video"></i
        ></a>
      </section>
      <section id="produtos">
        <nav class="nav-categorias"></nav>
      </section>
      <aside class="esconder">
        <i class="fa-solid fa-x"></i>
        <div class="cabecalho">
          <img src="./images/logo.png" alt="logo da empresa" />
          <h3></h3>
          <h4></h4>
        </div>
        <table class="tabela1">
          <thead>
            <tr>
              <th>PREPARO</th>
              <th>RETIRAR</th>
              <th>ENTREGAR</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td></td>
              <td></td>
              <td></td>
            </tr>
          </tbody>
        </table>
        <table class="tabela2">
          <thead>
            <tr>
              <th>DIA SEMANA</th>
              <th>ABERTURA</th>
              <th>FECHAMENTO</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        <h5 class="fechado-aberto"></h5>
        <h5 class="contato-empresa"></h5>
      </aside>
    </main>
    <footer>
      <section class="footer-inicial">
        <p>
          <i class="fa-solid fa-clipboard-check"></i>
          MEUS PEDIDOS
        </p>
      </section>
      <section class="conteudo-pedidos">
        <i class="fa-solid fa-x"></i>
        <div class="pedidos-anteriores"></div>
      </section>
    </footer>
  </body>
</html>

//===========================================================================

<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="./fontawesome/css/all.min.css" />
    <link rel="stylesheet" href="./css/global.css" />
    <link rel="stylesheet" href="./css/selecionar.css" />
    <script src="./javascript/sweetalert2.all.min.js"></script>
    <script type="module" src="./javascript/app.js" defer></script>
    <script type="module" src="./javascript/alpine.min.js" defer></script>
    <title></title>
  </head>
  <body>
    <nav id="nav-voltar">
      <a href="./index.html">
        <i class="fa-solid fa-arrow-left"></i>
        VOLTAR
      </a>
    </nav>
    <header>
      <i class="fa-solid fa-camera-retro"></i>
      <i class="fa-solid fa-magnifying-glass-plus"></i>
      <img src="" />
    </header>
    <main class="main-selecionar">
      <section id="produto-box">
        <div class="box-produto">
          <h3></h3>
          <small></small>
          <div class="agrupar">
            <span></span>
            <div>
              <i class="fa-solid fa-minus-circle"></i>
              <input
                type="number"
                id="qtd-principal"
                value="1"
                min="1"
                readonly
              />
              <i class="fa-solid fa-plus-circle"></i>
            </div>
          </div>
        </div>
        <fieldset>
          <legend>Observação</legend>
          <textarea id="observacao-cliente"></textarea>
        </fieldset>
      </section>
    </main>
    <footer>
      <button id="btn-adicionar">ADICIONAR</button>
    </footer>
  </body>
</html>

//===========================================================================

<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="./fontawesome/css/all.min.css" />
    <link rel="stylesheet" href="./css/global.css" />
    <link rel="stylesheet" href="./css/carrinho.css" />
    <script src="./javascript/sweetalert2.all.min.js"></script>
    <script type="module" src="./javascript/app.js" defer></script>
    <script type="module" src="./javascript/alpine.min.js" defer></script>
    <title></title>
  </head>
  <body>
    <nav id="nav-voltar">
      <a href="./index.html">
        <i class="fa-solid fa-arrow-left"></i>
        VOLTAR
      </a>
      <i class="fa-solid fa-trash"></i>
    </nav>
    <header>
      <img src="./images/logo.png" />
      <i class="fa-solid fa-handshake"></i>
      <img src="./images/daffari.jpg" />
    </header>
    <main>
      <section id="produto-box-carrinho"></section>
      <section id="section-botoes">
        <a href="./index.html" class="btn-continuar-comprando"
          >CONTINUAR COMPRANDO</a
        >
        <button href="./finalizar.html" class="btn-confirmar">
          <span>CONFIRMAR</span> <span></span>
        </button>
      </section>
    </main>
  </body>
</html>

//===========================================================================

<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="./fontawesome/css/all.min.css" />
    <link rel="stylesheet" href="./css/global.css" />
    <link rel="stylesheet" href="./css/finalizar.css" />
    <script src="./javascript/sweetalert2.all.min.js"></script>
    <script type="module" src="./javascript/app.js" defer></script>
    <script type="module" src="./javascript/alpine.min.js" defer></script>
    <title></title>
  </head>
  <body>
    <nav id="nav-voltar">
      <a href="./carrinho.html">
        <i class="fa-solid fa-arrow-left"></i>
        VOLTAR
      </a>
    </nav>
    <main>
      <section id="checkout-container">
        <h3>Tipo de Entrega</h3>
        <div class="tipo">
          <div id="info-entrega-atual" class="group">Aguardando...</div>
          <button>Alterar</button>
        </div>

        <div id="bloco-retirada" style="display: none">
          <h3 class="retiretext">Retire seu Pedido Aqui</h3>
          <div class="endereco-retirada">
            <p class="title" id="endereco-loja"></p>
            <span id="cidade-loja"></span>
          </div>
        </div>

        <div id="bloco-entrega" style="display: none"></div>

        <h3>Totais</h3>
        <div class="row">
          <p>Produtos</p>
          <p id="total-produtos">Total</p>
        </div>
        <div class="row taxa" id="bloco-taxa" style="display: none">
          <p>Taxa Entrega</p>
          <p id="total-taxa">Taxa</p>
        </div>
        <div class="row">
          <b>Total</b>
          <b id="total-geral">Total</b>
        </div>

        <h3>Meus Dados</h3>
        <fieldset class="nomef">
          <legend>Nome</legend>
          <input type="text" id="input-nome" class="nome" required />
        </fieldset>
        <fieldset class="fonef">
          <legend>Telefone</legend>
          <input type="text" id="input-fone" class="fone" readonly />
        </fieldset>

        <div id="forma-pagamento" style="display: none">
          <h3>Forma de Pagamento</h3>

          <label class="radio dinheiro">
            <input
              type="radio"
              required
              class="pagamento-dinheiro"
              name="forma-pagamento"
              value="D"
              onclick="exibirTroco()"
            />
            <span>Dinheiro</span>
          </label>

          <input
            type="number"
            id="input-troco"
            class="radio troco"
            placeholder="Levar Troco Para ?"
            value="0"
            style="display: none"
          />

          <label class="radio cartao">
            <input
              type="radio"
              required
              class="pagamento-cartao"
              name="forma-pagamento"
              value="C"
              onclick="ocultarTroco()"
            />
            <span>Cartão</span>
          </label>

          <label class="radio pix">
            <input
              type="radio"
              required
              class="pagamento-pix"
              name="forma-pagamento"
              value="P"
              onclick="ocultarTroco()"
            />
            <span>Pix</span>
          </label>
        </div>
        <button id="btn-finalizar" class="confirm">Finalizar</button>
      </section>
    </main>
  </body>
</html>

//===========================================================================

const URL_BASE_API = "controller/api.php";

export async function apiGet(endpoint) {
  const url = `${URL_BASE_API}?recurso=${endpoint}`;
  try {
    const resposta = await fetch(url, {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    });

    if (!resposta.ok) {
      const erroApi = await resposta.json();
      throw new Error(erroApi.message || resposta.statusText);
    }

    return await resposta.json();
  } catch (erro) {
    console.error("Erro ao buscar dados (GET):", erro);
    throw erro;
  }
}

export async function apiPost(endpoint, payload = {}) {
  const url = `${URL_BASE_API}?recurso=${endpoint}`;
  try {
    const resposta = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify(payload),
    });

    if (!resposta.ok) {
      const erroApi = await resposta.json();
      throw new Error(erroApi.message || resposta.statusText);
    }

    return await resposta.json();
  } catch (erro) {
    console.error("Erro ao enviar dados (POST):", erro);
    throw erro;
  }
}

//===========================================================================

import { apiGet } from "./api.js";

export async function verificarSessao() {
  try {
    const sessao = await apiGet("dados-sessao");
    return sessao;
  } catch (erro) {
    console.error("Erro ao buscar dados da sessão:", erro);
    return {};
  }
}

//===========================================================================

import { apiGet } from "./api.js";

export async function carregarEmpresa() {
  try {
    const resposta = await apiGet("empresa");

    if (resposta && resposta.empresa && resposta.parametros) {
      return resposta;
    }

    return { empresa: {}, parametros: {} };
  } catch (erro) {
    throw erro;
  }
}

export async function carregarHorarios() {
  return await apiGet("horarios");
}

//===========================================================================

import { apiGet } from "./api.js";

export async function carregarProdutos() {
  try {
    const produtos = await apiGet("produtos");
    return produtos || [];
  } catch (erro) {
    return [];
  }
}

export async function carregarCategorias() {
  try {
    const objCategorias = await apiGet("categorias");
    return objCategorias || [];
  } catch (erro) {
    return [];
  }
}

export async function carregarTamanhos(codigo) {
  if (!codigo) {
    return [];
  }

  try {
    const tamanhos = await apiGet(`tamanhos&cod=${codigo}`);
    return tamanhos || [];
  } catch (erro) {
    return [];
  }
}

export async function carregarSabores(codigo) {
  if (!codigo) {
    return [];
  }

  try {
    const sabores = await apiGet(`sabores&cod=${codigo}`);
    return sabores || [];
  } catch (erro) {
    return [];
  }
}

export async function carregarBordas(codigo) {
  if (!codigo) {
    return [];
  }

  try {
    const bordas = await apiGet(`bordas`);
    return bordas || [];
  } catch (erro) {
    return [];
  }
}

export async function carregarComplementos(produtoPrincipal) {
  if (
    !produtoPrincipal.RequerComplementoCod ||
    produtoPrincipal.RequerComplemento !== "S"
  ) {
    return [];
  }

  try {
    const complementos = await apiGet(
      `complementos&codigos=${produtoPrincipal.RequerComplementoCod}`
    );
    return complementos || [];
  } catch (erro) {
    return [];
  }
}

export async function carregarPedidosAnteriores(fone) {
  if (!fone) {
    return [];
  }

  try {
    const pedidosAnteriores = await apiGet(`pedidos-anteriores&fone=${fone}`);
    return pedidosAnteriores || [];
  } catch (erro) {
    return [];
  }
}

export async function carregarDetalhesPedidosAnteriores(codigo) {
  if (!codigo) {
    return [];
  }

  try {
    const detalhesPedidosAnteriores = await apiGet(
      `detalhes-pedidos-anteriores&codigo=${codigo}`
    );
    return detalhesPedidosAnteriores || [];
  } catch (erro) {
    return [];
  }
}

export async function carregarProdutoSelecionado() {
  try {
    const produtoSelecionado = await apiGet("produto-selecionado");
    return produtoSelecionado || null;
  } catch (erro) {
    return null;
  }
}

export async function carregarCarrinho() {
  try {
    const carrinho = await apiGet("pegar-carrinho");
    return carrinho || [];
  } catch (erro) {
    return [];
  }
}

export async function carregarPedidoFinalizacao() {
  try {
    const dadosPedido = await apiGet("pegar-pedido-finalizacao");
    return dadosPedido;
  } catch (erro) {
    return null;
  }
}

//===========================================================================

export function capturar(seletor, todos = false) {
  if (todos) {
    return document.querySelectorAll(seletor);
  }
  return document.querySelector(seletor);
}

export function criarElemento(seletor) {
  return document.createElement(seletor);
}

//========================================================================================//

const AppData = {
  empresa: null,
  parametros: null,
  horarios: null,
  categorias: null,
  produtos: null,
  sessao: null,
};

import { apiPost } from "./api.js";
import { carregarEmpresa, carregarHorarios } from "./empresa.js";
import {
  carregarProdutos,
  carregarCategorias,
  carregarTamanhos,
  carregarPedidosAnteriores,
  carregarDetalhesPedidosAnteriores,
  carregarProdutoSelecionado,
  carregarCarrinho,
  carregarComplementos,
  carregarSabores,
  carregarBordas,
  carregarPedidoFinalizacao,
} from "./produtos.js";
import { verificarSessao } from "./verificarSessao.js";
import { capturar, criarElemento } from "./capturar.js";

//========================================================================================//

async function verificacaoDaSessao() {
  const sessao = await verificarSessao();
  console.log(sessao);
  return sessao;
}

//========================================================================================//

function gerenciarInfoEmpresa(empresa, parametros) {
  try {
    const dadosEmpresa = empresa;
    const dadosParametros = parametros;

    if (!dadosEmpresa || !dadosParametros) {
      console.error("Dados da empresa não encontrados ou a requisição falhou.");
      return;
    }

    const title = capturar("title");
    if (title) {
      title.textContent = dadosEmpresa.Fantasia;
    }

    const tituloEmpresa = capturar("#titulo-empresa");
    if (tituloEmpresa) {
      tituloEmpresa.textContent = dadosEmpresa.Fantasia;
    }

    const cidadeEmpresa = capturar("#cidade-empresa");
    if (cidadeEmpresa) {
      cidadeEmpresa.textContent = `${dadosEmpresa.Cidade} - SP`;
    }

    const infoStatus = capturar(".status > span", true);

    if (infoStatus) {
      if (infoStatus[0]) {
        infoStatus[0].textContent =
          dadosParametros.aberto === "S" ? "ABERTO" : "FECHADO";
        infoStatus[0].style.color =
          dadosParametros.aberto === "S" ? "#080" : "#c00";

        infoStatus[0].addEventListener("click", () => {
          Swal.fire({
            text: `ESTAMOS ${
              dadosParametros.aberto === "S" ? "ABERTOS" : "FECHADOS"
            }`,
            icon: dadosParametros.aberto === "S" ? "success" : "error",
            backdrop: "rgba(0,0,0,0.7)",
            confirmButtonColor:
              dadosParametros.aberto === "S" ? "#080" : "#c00",
          });
        });
      }

      if (infoStatus[1]) {
        infoStatus[1].innerHTML =
          dadosParametros.ativaentrega === "N"
            ? "RETIRAR | <del>ENTREGAR</del>"
            : "RETIRAR | ENTREGAR";

        infoStatus[1].addEventListener("click", () => {
          Swal.fire({
            text: `ENTREGA ESTÁ ${
              dadosParametros.ativaentrega === "N" ? "DESATIVADA" : "ATIVA"
            }`,
            icon: dadosParametros.ativaentrega === "S" ? "success" : "error",
            backdrop: "rgba(0,0,0,0.7)",
            confirmButtonColor:
              dadosParametros.ativaentrega === "S" ? "#080" : "#c00",
          });
        });
      }

      if (infoStatus[2]) {
        infoStatus[2].innerHTML = `<i class="fa-regular fa-clock"></i> ${dadosParametros.tempoentrega}`;

        infoStatus[2].addEventListener("click", () => {
          Swal.fire({
            text: ` TEMPO DE ENTREGA É DE ${dadosParametros.tempoentrega}`,
            icon: "info",
            backdrop: "rgba(0,0,0,0.7)",
            confirmButtonColor: "#080",
          });
        });
      }
    }
  } catch (error) {
    console.error("Falha ao gerenciar informações da empresa:", error);
  }
}

//========================================================================================//

function gerenciarCategoriasMercadorias(categorias, produtos) {
  try {
    const navCategorias = capturar(".nav-categorias");
    const sectionProdutos = capturar("#produtos");

    if (!navCategorias || !sectionProdutos) {
      return;
    }

    if (categorias.length > 0) {
      categorias.forEach((categoria) => {
        const linkCategoria = document.createElement("a");
        linkCategoria.href = `#${categoria.descricao}`;
        linkCategoria.textContent = categoria.descricao;
        navCategorias.insertAdjacentElement("beforeend", linkCategoria);
      });
    }

    if (produtos.length > 0 && categorias.length > 0) {
      categorias.forEach((categoria) => {
        const h3Categoria = document.createElement("h3");
        h3Categoria.id = categoria.descricao;
        h3Categoria.textContent = categoria.descricao;
        sectionProdutos.insertAdjacentElement("beforeend", h3Categoria);

        const produtosDaCategoria = produtos.filter(
          (item) => item.categoria === categoria.descricao
        );

        produtosDaCategoria.forEach((mercadoria) => {
          const preco = Number(mercadoria.Venda).toFixed(2);

          const observacaoProduto = mercadoria.Observacao
            ? mercadoria.Observacao
            : "";

          const boxDoProduto = criarElemento("div");
          boxDoProduto.classList.add("box-produto");

          const imagemItem = criarElemento("div");
          imagemItem.classList.add("imagem-item");

          const urlImagemProduto = "./images/empresa.jpg";

          imagemItem.innerHTML = `<img src="${urlImagemProduto}" alt="produto" />`;

          const produtoItem = criarElemento("div");
          produtoItem.classList.add("produto-item");

          produtoItem.innerHTML = `
                      <span class="descricao">${mercadoria.Descricao}</span>
                      <span class="observacao-produto">${observacaoProduto}</span>
                      <span class="preco">R$ ${preco}</span>
                      `;

          boxDoProduto?.addEventListener("click", async () => {
            const tamanhos = await carregarTamanhos(mercadoria.Codigo);
            const sabores = await carregarSabores(mercadoria.Codigo);
            const bordas = await carregarBordas();
            console.log(tamanhos);
            console.log(sabores);
            console.log(bordas);

            let tamanhoFinal = null;
            let precoFinal = Number(mercadoria.Venda).toFixed(2);
            let saboresPermitidosFinal = "";
            let permiteBordaFinal = "";

            if (tamanhos && tamanhos.length > 0) {
              let htmlSwal = `
                                <style>
                                    .tamanho-button-group input[type="radio"] { display: none; }
                                    .tamanho-button-group label {
                                        display: inline-block; padding: 8px 15px; margin: 5px;
                                        border: 1px solid #ccc; border-radius: 20px; cursor: pointer;
                                        font-weight: bold; transition: all 0.1s; width: 200px; text-align: center;
                                    }
                                    .tamanho-button-group input[type="radio"]:checked + label {
                                        background-color: #080; color: white; border-color: #080;
                                        box-shadow: 0 0 8px 2px rgba(0, 0, 0, 0.2);
                                    }
                                </style>
                                <div style="text-align: center; margin-top: 10px;">
                              `;

              tamanhos.forEach((tamanho) => {
                htmlSwal += `
                                    <div class="tamanho-button-group" style="display: inline-block;">
                                        <input 
                                            type="radio" 
                                            id="${tamanho.Tamanho}" 
                                            name="tamanho-produto" 
                                            value="${tamanho.Tamanho}|${Number(
                  tamanho.Valor
                ).toFixed(2)}|${tamanho.Sabores}|${tamanho.PermiteBorda}" 
                                        />
                                        <label for="${tamanho.Tamanho}">
                                            ${tamanho.Tamanho} R$ ${Number(
                  tamanho.Valor
                ).toFixed(2)}
                                        </label>
                                    </div>
                                `;
              });

              htmlSwal += `</div>`;

              const result = await Swal.fire({
                title: `SELECIONE O TAMANHO:`,
                html: htmlSwal,
                icon: "question",
                backdrop: "rgba(0,0,0,0.7)",
                showCancelButton: true,
                confirmButtonColor: "#080",
                cancelButtonText: "Cancelar",
                cancelButtonColor: "#c00",
                focusConfirm: false,
                preConfirm: () => {
                  const radioSelecionado = document.querySelector(
                    'input[name="tamanho-produto"]:checked'
                  );
                  if (!radioSelecionado) {
                    Swal.showValidationMessage(
                      "Por favor, selecione um tamanho."
                    );
                    return false;
                  }
                  return radioSelecionado.value;
                },
              });

              if (result.isConfirmed) {
                const [tamanho, preco, sabores, permiteBorda] =
                  result.value.split("|");
                tamanhoFinal = tamanho;
                precoFinal = preco;
                saboresPermitidosFinal = sabores;
                permiteBordaFinal = permiteBorda;
              } else {
                return;
              }
            }

            const payload = {
              categoria: mercadoria.categoria,
              produto: mercadoria.Codigo,
              descricao: mercadoria.Descricao,
              observacaoProduto: observacaoProduto,
              preco: precoFinal,
              imgProduto: urlImagemProduto,
              RequerComplemento: mercadoria.RequerComplemento,
              RequerComplementoCod: mercadoria.RequerComplementoCod,
              tamanho: tamanhoFinal,
              saboresPermitidos: saboresPermitidosFinal,
              PermiteBorda: permiteBordaFinal,
            };

            try {
              await apiPost("selecionar-produto", payload);
              window.location.href = "selecionar.html";
            } catch (erro) {
              console.error("Erro ao enviar dados para a API:", erro.message);
              Swal.fire({
                text: "Ocorreu um erro ao selecionar o produto. Tente novamente.",
                icon: "error",
                backdrop: "rgba(0,0,0,0.7)",
                confirmButtonColor: "#c00",
              });
            }
          });

          boxDoProduto?.append(produtoItem, imagemItem);
          sectionProdutos?.appendChild(boxDoProduto);
        });
      });
    }
  } catch (error) {
    console.error("Falha ao gerenciar categorias e mercadorias:", error);
  }
}

//========================================================================================//

function gerenciarAside(empresa, horarios, parametros) {
  try {
    const dadosEmpresa = empresa;
    const dadosHorarios = horarios;
    const dadosParametros = parametros;

    if (!dadosEmpresa || !dadosParametros || !dadosHorarios) {
      console.error("Dados de empresa ou horários não encontrados.");
      return;
    }

    const h3Aside = capturar("aside h3");
    if (h3Aside) {
      h3Aside.textContent = `${dadosEmpresa.Endereco}, ${dadosEmpresa.Numero}`;
    }

    const h4Aside = capturar("aside h4");
    if (h4Aside) {
      h4Aside.textContent = `${dadosEmpresa.Bairro}`;
    }

    const tdPreparo = capturar(".tabela1 td:nth-of-type(1)");
    if (tdPreparo) {
      tdPreparo.textContent = dadosParametros.tempoentrega;
    }

    const tdRetirar = capturar(".tabela1 td:nth-of-type(2)");
    if (tdRetirar) {
      tdRetirar.textContent = "SIM";
    }

    const tdEntregar = capturar(".tabela1 td:nth-of-type(3)");
    if (tdEntregar) {
      tdEntregar.textContent =
        dadosParametros.ativaentrega === "S" ? "SIM" : "NÃO";
    }

    const tabelaHorarios = capturar(".tabela2 tbody");

    if (tabelaHorarios && dadosHorarios.length > 0) {
      const mapaDias = {
        DOM: "Domingo",
        SEG: "Segunda",
        TER: "Terça",
        QUA: "Quarta",
        QUI: "Quinta",
        SEX: "Sexta",
        SAB: "Sábado",
      };

      dadosHorarios.forEach((item) => {
        const tr = document.createElement("tr");

        const tdDia = document.createElement("td");
        if (tdDia) {
          tdDia.textContent = mapaDias[item.dia] || item.dia;
          tr.appendChild(tdDia);
        }

        const tdAbertura = document.createElement("td");
        if (tdAbertura) {
          tdAbertura.textContent = item.abertura.substring(0, 5);
          tr.appendChild(tdAbertura);
        }

        const tdFechamento = document.createElement("td");
        if (tdFechamento) {
          tdFechamento.textContent = item.fechamento.substring(0, 5);
          tr.appendChild(tdFechamento);
        }

        tabelaHorarios.appendChild(tr);
      });
    }

    const abertoFechado = capturar(".fechado-aberto");
    if (abertoFechado) {
      abertoFechado.innerHTML =
        dadosParametros.aberto === "S"
          ? "<i class='fa-solid fa-door-open'></i> ESTAMOS [ ABERTOS ]"
          : "<i class='fa-solid fa-door-closed'></i> ESTAMOS [ FECHADOS ]";

      abertoFechado.style.color =
        dadosParametros.aberto === "S" ? "#080" : "#c00";
    }

    const contatoEmpresa = capturar(".contato-empresa");
    if (contatoEmpresa) {
      contatoEmpresa.textContent =
        dadosEmpresa.Telefone != null
          ? `ENTRE EM CONTATO ${dadosEmpresa.Telefone}`
          : "";

      contatoEmpresa.style.display =
        dadosEmpresa.Telefone != null ? "block" : "none";
    }

    const logoEmpresa = capturar("#logo-empresa");
    const fechar = capturar("aside > i");
    const asideBox = capturar("aside");

    if (logoEmpresa && asideBox) {
      logoEmpresa.addEventListener("click", () => {
        asideBox.classList.add("aparecer");
      });
    }

    if (fechar && asideBox) {
      fechar.addEventListener("click", () => {
        asideBox.classList.remove("aparecer");
      });
    }
  } catch (error) {
    console.error("Falha ao gerenciar o aside:", error);
  }
}

//========================================================================================//

async function gerenciarPedidosAnteriores(foneDoUsuario) {
  try {
    if (!foneDoUsuario) {
      console.log("Usuário não logado. Não irá carregar pedidos anteriores.");
      return;
    }

    const pedidosAnteriores = await carregarPedidosAnteriores(foneDoUsuario);

    const footer = capturar("footer");
    const abrirFooter = capturar("footer > .footer-inicial");
    const fecharFooter = capturar("footer .fa-x");
    const sectionPedidosAnteriores = capturar(".pedidos-anteriores");

    if (abrirFooter && footer) {
      abrirFooter.addEventListener("click", () => {
        footer.classList.add("footer-aberto");
        document.body.classList.add("no-scroll");
      });
    }

    if (fecharFooter && footer) {
      fecharFooter.addEventListener("click", () => {
        footer.classList.remove("footer-aberto");
        document.body.classList.remove("no-scroll");
      });
    }

    if (Array.isArray(pedidosAnteriores) && pedidosAnteriores.length > 0) {
      pedidosAnteriores.forEach((pedido) => {
        const divPedido = criarElemento("div");
        divPedido.classList.add("pedido-item");

        const dataCompleta = new Date(`${pedido.Data}T${pedido.Hora}`);

        const opcoesDeFormato = {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
        };

        const dataFormatada = new Intl.DateTimeFormat(
          "pt-BR",
          opcoesDeFormato
        ).format(dataCompleta);

        const dataHoraPedido = criarElemento("p");
        dataHoraPedido.innerHTML = `<i class="fa-solid fa-calendar-days"></i> ${dataFormatada} - ${pedido.Hora.substring(
          0,
          5
        )}`;

        const botaoDetalhes = criarElemento("button");
        botaoDetalhes.classList.add("detalhes-pedido-btn");
        botaoDetalhes.innerHTML = `<i class='fa-solid fa-circle-info'></i> Detalhes <i class='fa-solid fa-arrow-pointer'></i>`;

        const valorPedido = criarElemento("p");
        valorPedido.innerHTML = `<i class='fa-solid fa-money-bill-wave'></i> ${pedido.totalpedido}`;

        divPedido.append(dataHoraPedido, botaoDetalhes, valorPedido);

        if (sectionPedidosAnteriores) {
          sectionPedidosAnteriores.appendChild(divPedido);
        }

        botaoDetalhes.addEventListener("click", () => {
          mostrarDetalhesPedidosAnteriores(pedido.Codigo);
        });
      });
    } else {
      console.log(
        "Nenhum pedido anterior encontrado ou a resposta da API não foi um array.",
        pedidosAnteriores
      );
    }
  } catch (error) {
    console.error("Falha ao gerenciar pedidos anteriores:", error);
  }
}

//========================================================================================//

async function mostrarDetalhesPedidosAnteriores(codigo) {
  try {
    const detalhesPedidosAnteriores = await carregarDetalhesPedidosAnteriores(
      codigo
    );

    let dataHora = "";
    let totalPedido = "";

    if (detalhesPedidosAnteriores && detalhesPedidosAnteriores.length > 0) {
      const obj = detalhesPedidosAnteriores[0];
      const dataCompleta = new Date(`${obj.Data}T${obj.Hora}`);
      const opcoesDeFormato = {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      };

      const dataFormatada = new Intl.DateTimeFormat(
        "pt-BR",
        opcoesDeFormato
      ).format(dataCompleta);
      const horaSimplificada = obj.Hora.substring(0, 5);
      dataHora = `${dataFormatada} - ${horaSimplificada}`;
    }

    let conteudoHtml = "<ul>";

    if (detalhesPedidosAnteriores) {
      detalhesPedidosAnteriores.forEach((obj) => {
        totalPedido = obj.totalpedido;

        if (obj.Complementos && Array.isArray(obj.Complementos)) {
          conteudoHtml += `<li><b>${obj.Descricao}</b> <b>${Number(
            obj.Valor
          ).toFixed(2)}</b></li>`;

          if (obj.Complementos.length > 0) {
            conteudoHtml += "<ul>";
            obj.Complementos.forEach((comp) => {
              conteudoHtml += `<li><span>${
                comp.DescricaoComp
              }</span> <span>${Number(comp.Valor).toFixed(2)}</span></li>`;
            });
            conteudoHtml += "</ul>";
          }
        } else if (obj.TaxaTransp) {
          conteudoHtml += `<li style="color: #080;"><span>Taxa de Transporte:</span> <span>${Number(
            obj.TaxaTransp
          ).toFixed(2)}</span></li>`;
        }
      });
    }

    conteudoHtml += "</ul>";

    conteudoHtml += `<p style="color: #c00;"><span>Total do Pedido:</span> <span>${Number(
      totalPedido
    ).toFixed(2)}</span></p>`;

    Swal.fire({
      title: dataHora,
      html: conteudoHtml,
      backdrop: "rgba(0,0,0,0.7)",
      confirmButtonColor: "#080",
    });
  } catch (error) {
    console.error("Falha ao carregar detalhes do pedido:", error);
  }
}

//========================================================================================//

async function gerenciarProdutoSelecionado() {
  try {
    const produtoSelecionado = await carregarProdutoSelecionado();
    const empresa = await carregarEmpresa();

    const title = capturar("title");

    if (empresa) {
      title.textContent = empresa.empresa.Fantasia;
    }

    const imgProdutoHeader = capturar("header img");
    const iconeLupa = capturar(".fa-magnifying-glass-plus");
    const tituloProduto = capturar(".box-produto h3");
    const descricaoProduto = capturar(".box-produto small");
    const precoProduto = capturar(".box-produto .agrupar span");
    const btnMinusPrincipal = capturar(
      ".box-produto .agrupar .fa-minus-circle"
    );
    const btnPlusPrincipal = capturar(".box-produto .agrupar .fa-plus-circle");
    const inputQtdPrincipal = capturar(".box-produto .agrupar input");
    const areaObservacaoCliente = capturar("#observacao-cliente");
    const btnAdicionar = capturar("#btn-adicionar");

    if (imgProdutoHeader && produtoSelecionado?.imgProduto) {
      imgProdutoHeader.src = produtoSelecionado.imgProduto;

      iconeLupa?.addEventListener("click", () => {
        Swal.fire({
          title: produtoSelecionado.descricao,
          html: `<img src="${produtoSelecionado.imgProduto}" />`,
          backdrop: "rgba(0,0,0,0.7)",
          confirmButtonColor: "#080",
        });
      });
    }

    if (tituloProduto && produtoSelecionado) {
      tituloProduto.textContent = produtoSelecionado.descricao;
    }

    if (descricaoProduto && produtoSelecionado) {
      descricaoProduto.textContent = produtoSelecionado.observacaoProduto;
    }

    if (precoProduto && produtoSelecionado) {
      precoProduto.textContent = `R$ ${produtoSelecionado.preco}`;
    }

    if (btnMinusPrincipal && btnPlusPrincipal && inputQtdPrincipal) {
      btnMinusPrincipal.addEventListener("click", () => {
        const valorAtual = Number(inputQtdPrincipal.value);
        if (valorAtual > 1) {
          inputQtdPrincipal.value = valorAtual - 1;
        }
      });

      btnPlusPrincipal.addEventListener("click", () => {
        const valorAtual = Number(inputQtdPrincipal.value);
        inputQtdPrincipal.value = valorAtual + 1;
      });
    }

    if (
      produtoSelecionado?.RequerComplemento === "S" &&
      produtoSelecionado?.RequerComplementoCod
    ) {
      const complementos = await carregarComplementos(produtoSelecionado);
      const mainSelecionar = capturar(".main-selecionar");
      const sectionComplementos = criarElemento("section");
      sectionComplementos.id = "section-complementos";

      if (complementos.length > 0) {
        complementos.forEach((complemento) => {
          const divComplemento = criarElemento("div");
          divComplemento.classList.add("div-complemento");

          const conteudoComplemento = `
            <div class="complemento-descricao-valor">
              <p>${complemento.Descricao}</p>
              <small>R$ ${Number(complemento.Venda).toFixed(2)}</small>
            </div>
            <div class="qtd-complemento">
              <i class="comp fa-solid fa-minus-circle"></i>
              <input
                  type="number"
                  name="qtd-complemento"
                  value="0"
                  min="1"
                  readonly
                />
              <i class="comp fa-solid fa-plus-circle"></i>
            </div>
          `;

          divComplemento.innerHTML = conteudoComplemento;
          sectionComplementos?.appendChild(divComplemento);
        });
        mainSelecionar?.appendChild(sectionComplementos);
      }

      const btnMinusComplemento = capturar(".comp.fa-minus-circle", true);
      const btnPlusComplemento = capturar(".comp.fa-plus-circle", true);

      if (btnMinusComplemento) {
        btnMinusComplemento.forEach((btn) => {
          btn.addEventListener("click", () => {
            const inputQtdComplemento = btn
              .closest(".div-complemento")
              .querySelector("[name='qtd-complemento']");

            if (inputQtdComplemento) {
              const valorAtualComplemento = Number(inputQtdComplemento.value);
              if (valorAtualComplemento > 0) {
                inputQtdComplemento.value = valorAtualComplemento - 1;
              }
            }
          });
        });
      }

      if (btnPlusComplemento) {
        btnPlusComplemento.forEach((btn) => {
          btn.addEventListener("click", () => {
            const inputQtdComplemento = btn
              .closest(".div-complemento")
              .querySelector("[name='qtd-complemento']");

            if (inputQtdComplemento) {
              const valorAtualComplemento = Number(inputQtdComplemento.value);
              inputQtdComplemento.value = valorAtualComplemento + 1;
            }
          });
        });
      }
    }

    btnAdicionar?.addEventListener("click", async () => {
      if (inputQtdPrincipal && areaObservacaoCliente && produtoSelecionado) {
        const quantidadePrincipal = Number(inputQtdPrincipal.value);
        const observacaoCliente = areaObservacaoCliente.value;
        const precoUnitarioPrincipal = Number(produtoSelecionado.preco);

        const complementosSelecionados = obterComplementosSelecionados();

        const custoTotalComplementos = complementosSelecionados.reduce(
          (total, comp) => {
            return total + comp.totalComplemento;
          },
          0
        );

        const montandoCarrinho = {
          ...produtoSelecionado,
          preco: precoUnitarioPrincipal.toFixed(2),
          quantidade: quantidadePrincipal,
          observacaoCliente: observacaoCliente,
          complementos: complementosSelecionados,
          custoComplementos: custoTotalComplementos.toFixed(2),
        };

        if (produtoSelecionado.editarIndex !== undefined) {
          montandoCarrinho.editarIndex = produtoSelecionado.editarIndex;
        }

        try {
          const resposta = await apiPost(
            "adicionar-ao-carrinho",
            montandoCarrinho
          );
          if (resposta.message) {
            console.log(resposta.message);
            window.location.href = "./carrinho.html";
            areaObservacaoCliente.value = "";
          }
        } catch (erro) {
          console.error("Falha ao adicionar ao carrinho:", erro.message);
          Swal.fire({
            text: "Ocorreu um erro ao adicionar o produto. Tente novamente.",
            icon: "error",
            backdrop: "rgba(0,0,0,0.7)",
            confirmButtonColor: "#c00",
          });
        }
      }
    });
  } catch (error) {
    console.error("Falha ao gerenciar produto selecionado:", error);
    window.location.href = "./index.html";
  }
}

//========================================================================================//

function obterComplementosSelecionados() {
  const complementos = [];
  const divsComplemento = capturar(".div-complemento", true);

  if (!divsComplemento) {
    return complementos;
  }

  divsComplemento.forEach((div) => {
    const inputQtd = div.querySelector("[name='qtd-complemento']");
    const qtd = Number(inputQtd.value);

    if (qtd > 0) {
      const descricaoElement = div.querySelector(
        ".complemento-descricao-valor p"
      );
      const valorElement = div.querySelector(
        ".complemento-descricao-valor small"
      );

      const valorTexto = valorElement.textContent.replace("R$ ", "").trim();
      const valorUnitario = Number(valorTexto);

      complementos.push({
        Descricao: descricaoElement.textContent.trim(),
        Venda: valorUnitario,
        quantidade: qtd,
        totalComplemento: valorUnitario * qtd,
      });
    }
  });

  return complementos;
}

//========================================================================================//

async function gerenciarCarrinho() {
  try {
    const empresa = await carregarEmpresa();
    const carrinho = await carregarCarrinho();
    const iconeLixeira = capturar("#nav-voltar .fa-trash");
    const sectionProdutoBox = capturar("#produto-box-carrinho");
    const btnConfirmar = capturar(".btn-confirmar");
    let subtotalCarrinho = 0;

    const title = capturar("title");
    if (title) {
      title.textContent = empresa.empresa.Fantasia;
    }

    function renderizarProdutos(produtos) {
      if (!sectionProdutoBox) {
        return;
      }

      sectionProdutoBox.innerHTML = "";

      if (produtos.length > 0) {
        produtos.forEach((produto, index) => {
          const divCadaProduto = criarElemento("div");
          divCadaProduto.classList.add("div-cada-produto");

          const divCabecalhoProduto = criarElemento("div");
          divCabecalhoProduto.classList.add("produto-cabecalho");

          const precoPrincipal = Number(produto.preco);
          const custoComp = Number(produto.custoComplementos || 0);
          const precoUnitarioComTudo = precoPrincipal + custoComp;
          const precoTotalDoItem = precoUnitarioComTudo * produto.quantidade;
          subtotalCarrinho += precoTotalDoItem;
          const precoTotalPrincipal = (
            precoPrincipal * produto.quantidade
          ).toFixed(2);

          divCabecalhoProduto.innerHTML = `
            <span>${produto.quantidade}x ${produto.descricao}</span>
            <span>R$ ${precoTotalPrincipal}<i class="fa-solid fa-ellipsis-vertical"></i></span>
          `;

          divCadaProduto.appendChild(divCabecalhoProduto);

          if (
            produto.complementos &&
            Array.isArray(produto.complementos) &&
            produto.complementos.length > 0
          ) {
            const divComplementosContainer = criarElemento("div");
            divComplementosContainer.classList.add("complementos-container");

            produto.complementos.forEach((comp) => {
              const divComplementoItem = criarElemento("div");
              divComplementoItem.classList.add("complemento-item");

              const precoUnitarioComplemento = Number(comp.Venda).toFixed(2);

              divComplementoItem.innerHTML = `
                <span class="comp-desc">${comp.quantidade}x ${comp.Descricao}</span>
                <span class="comp-preco">R$ ${precoUnitarioComplemento}</span>
              `;

              divComplementosContainer.appendChild(divComplementoItem);
            });

            divCadaProduto.appendChild(divComplementosContainer);
          }

          sectionProdutoBox.append(divCadaProduto);

          const elipse = divCabecalhoProduto.querySelector(
            ".fa-ellipsis-vertical"
          );

          if (elipse) {
            elipse.addEventListener("click", async () => {
              const resultado = await Swal.fire({
                title: "O que deseja fazer?",
                icon: "question",
                showDenyButton: true,
                showCancelButton: true,
                confirmButtonText: "Editar",
                denyButtonText: "Excluir",
                cancelButtonText: "Cancelar",
                confirmButtonColor: "#080",
                denyButtonColor: "#c00",
                cancelButtonColor: "#aaa",
                backdrop: "rgba(0,0,0,0.7)",
              });

              if (resultado.isConfirmed) {
                try {
                  await apiPost("selecionar-produto", {
                    ...produtos[index],
                    editarIndex: index,
                  });
                  window.location.href = "selecionar.html";
                } catch (erro) {
                  Swal.fire("Erro", "Não foi possível editar o item.", "error");
                }
              } else if (resultado.isDenied) {
                const respostaApi = await apiPost("remover-item-carrinho", {
                  index: index,
                });
                if (respostaApi.message) {
                  Swal.fire(
                    "Item Removido!",
                    respostaApi.message,
                    "success"
                  ).then(() => {
                    renderizarProdutos(produtos.filter((_, i) => i !== index));
                    if (produtos.length === 1) {
                      setTimeout(() => {
                        window.location.href = "./index.html";
                      }, 500);
                    }
                  });
                } else {
                  Swal.fire("Erro", "Índice do produto inválido.", "error");
                }
              } else if (resultado.isDismissed) {
                Swal.fire("Ação cancelada", "O item não foi alterado.", "info");
              }
            });
          }
        });

        const subtotalFormatado = subtotalCarrinho.toFixed(2);

        if (btnConfirmar) {
          const spans = capturar("#section-botoes button span", true);
          spans[1].textContent = `R$ ${subtotalFormatado}`;
        }
      } else {
        sectionProdutoBox.innerHTML =
          "<p class='carrinho-vazio'>O carrinho está vazio.</p>";
      }
    }

    renderizarProdutos(carrinho);

    iconeLixeira?.addEventListener("click", async () => {
      const resultadoLimparCarrinho = await Swal.fire({
        title: "Limpar Carrinho?",
        text: "Você não poderá reverter esta ação depois!",
        icon: "question",
        backdrop: "rgba(0,0,0,0.7)",
        showCancelButton: true,
        confirmButtonText: "Sim, limpar",
        confirmButtonColor: "#080",
        cancelButtonText: "Não, cancelar",
        cancelButtonColor: "#c00",
      });

      if (resultadoLimparCarrinho.isConfirmed) {
        try {
          const respostaApi = await apiPost("limpar-pedido");
          if (respostaApi.message) {
            Swal.fire("Carrinho Limpo!", respostaApi.message, "success").then(
              () => {
                renderizarProdutos([]);
                setTimeout(() => {
                  window.location.href = "./index.html";
                }, 500);
              }
            );
          }
        } catch (erro) {
          Swal.fire("Erro", erro.message, "error");
        }
      } else if (resultadoLimparCarrinho.isDismissed) {
        Swal.fire("Ação cancelada", "O carrinho não foi alterado.", "error");
      }
    });

    btnConfirmar?.addEventListener("click", async () => {
      const dadosPedido = {
        carrinho: carrinho,
        subtotal: subtotalCarrinho.toFixed(2),
      };

      try {
        const respostaApi = await apiPost("salvar-pedido-sessao", dadosPedido);

        if (respostaApi.sucesso) {
          window.location.href = "./finalizar.html";
        } else {
          Swal.fire(
            "Erro",
            respostaApi.message ||
              "Falha ao preparar o pedido. Tente novamente.",
            "error"
          );
        }
      } catch (erro) {
        Swal.fire(
          "Erro",
          erro.message || "Erro de comunicação com o servidor.",
          "error"
        );
      }
    });
  } catch (error) {
    console.error("Falha ao gerenciar o carrinho:", error);
  }
}

//========================================================================================//

async function gerenciarFinalizacao(sessaoCarregada) {
  try {
    let formaEntrega = null;
    let carrinho, subtotal;

    const dadosPedido = await carregarPedidoFinalizacao();
    const dadosEmpresaObj = await carregarEmpresa();
    const dadosSessao = sessaoCarregada;

    if (
      !dadosPedido ||
      !Array.isArray(dadosPedido.carrinho) ||
      dadosPedido.carrinho.length === 0
    ) {
      Swal.fire(
        "Ops!",
        "Seu carrinho está vazio ou expirou. Por favor, volte ao carrinho.",
        "warning"
      ).then(() => {
        window.location.href = "./carrinho.html";
      });
      return;
    }

    carrinho = dadosPedido.carrinho;
    subtotal = dadosPedido.subtotal;

    const empresa = dadosEmpresaObj;

    const title = capturar("title");
    title.textContent = empresa.empresa.Fantasia;

    const entregaLiberada = empresa.parametros.ativaentrega === "S";
    const entregaDisabled = !entregaLiberada ? "disabled" : "";

    const textoEntrega = entregaLiberada
      ? "Entregar <br> <small>Taxa será calculada</small>"
      : "Entrega indisponível";

    const result = await Swal.fire({
      title: "COMO DESEJA RECEBER?",
      icon: "question",
      backdrop: "rgba(0,0,0,0.7)",

      html: `
              <style>
                .entrega-button-group input[type="radio"] { display: none; }
                .entrega-button-group label {
                display: inline-block; padding: 8px 16px; margin: 5px;
                border: 1px solid #ccc; border-radius: 25px; cursor: pointer;
                font-weight: bold; transition: all 0.1s; width: 200px; text-align: center;
                }
                  .entrega-button-group input[type="radio"]:checked + label {
                  background-color: #080; color: white; border-color: #080;
                  box-shadow: 0 0 8px 2px rgba(0, 0, 0, 0.2);
                }
                .entrega-button-group .disabled { opacity: 0.6; cursor: not-allowed; }
              </style>

              <div style="text-align: center;">
                <div class="entrega-button-group" style="display: inline-block;">
                  <input type="radio" id="retirada" name="forma-entrega" value="R" />
                  <label for="retirada">
                  <i class="fas fa-walking"></i> Retirar <br> <small>Sem taxa de entrega</small>
                  </label>
                </div>

                <div class="entrega-button-group" style="display: inline-block;">
                  <input type="radio" id="entrega" name="forma-entrega" value="E" ${entregaDisabled} />
                  <label for="entrega" class="${entregaDisabled}">
                  <i class="fas fa-motorcycle"></i> ${textoEntrega}
                  </label>
                </div>
              </div>
            `,
      confirmButtonText: "Confirmar",
      confirmButtonColor: "#080",
      allowOutsideClick: false,
      allowEscapeKey: false,
      focusConfirm: false,

      preConfirm: () => {
        const radioSelecionado = document.querySelector(
          'input[name="forma-entrega"]:checked'
        );

        if (!radioSelecionado) {
          Swal.showValidationMessage("Por favor, selecione uma opção válida.");
          return false;
        }
        return radioSelecionado.value;
      },
    });

    if (result.isConfirmed) {
      formaEntrega = result.value;
    }

    if (formaEntrega) {
      const divTipoEntrega = capturar(".tipo #info-entrega-atual");
      const blocoTaxa = capturar(".taxa#bloco-taxa");
      const valorTaxa = capturar(".taxa #total-taxa");
      const blocoRetirada = capturar("#bloco-retirada");
      const btnAlterarTipo = capturar(".tipo button");
      const textoValorProduto = capturar(".row #total-produtos");
      const precoTotalPedido = capturar(".row #total-geral");
      const inputNomeF = capturar(".nomef #input-nome");
      const inputFoneF = capturar(".fonef #input-fone");

      btnAlterarTipo?.addEventListener("click", () =>
        gerenciarFinalizacao(dadosSessao)
      );

      if (textoValorProduto) {
        textoValorProduto.textContent = `R$ ${Number(subtotal).toFixed(2)}`;
      }

      if (dadosSessao && dadosSessao.usuario && inputFoneF) {
        inputFoneF.value = dadosSessao.usuario.telefone;
      }

      if (formaEntrega === "E") {
        divTipoEntrega.innerHTML = `
          <i class="fas fa-motorcycle"></i> Entregar
          `;

        if (blocoRetirada) {
          blocoRetirada.style.display = "none";
        }

        if (blocoTaxa && valorTaxa && precoTotalPedido) {
          blocoTaxa.style.display = "flex";
          valorTaxa.textContent = 5;
          precoTotalPedido.textContent = `R$ ${
            Number(subtotal) + Number(valorTaxa.textContent)
          }`;
        }
      } else {
        const enderecoLoja = capturar("#endereco-loja");
        const cidadeLoja = capturar("#cidade-loja");

        divTipoEntrega.innerHTML = `
          <i class="fas fa-walking"></i> Retirar
          `;

        if (blocoRetirada) {
          blocoRetirada.style.display = "block";
        }

        if (enderecoLoja) {
          enderecoLoja.textContent = `${empresa.empresa.Endereco}, ${empresa.empresa.Numero} - ${empresa.empresa.Bairro}`;
        }

        if (cidadeLoja) {
          cidadeLoja.textContent = `${empresa.empresa.Cidade}`;
        }

        if (precoTotalPedido) {
          precoTotalPedido.textContent = `R$ ${Number(subtotal).toFixed(2)}`;
        }
      }
    }
  } catch (error) {
    console.error("Erro na inicialização da finalização:", error);

    Swal.fire(
      "Erro",
      "Falha ao carregar dados essenciais para o pedido. Você será redirecionado.",
      "error"
    ).then(() => {
      window.location.href = "./carrinho.html";
    });
  }
}

//========================================================================================//

async function carregarDadosIniciais() {
  try {
    const [empresaData, horarios, categorias, produtos] = await Promise.all([
      carregarEmpresa(),
      carregarHorarios(),
      carregarCategorias(),
      carregarProdutos(),
    ]);

    AppData.empresa = empresaData?.empresa || {};
    AppData.parametros = empresaData?.parametros || {};
    AppData.horarios = horarios || [];
    AppData.categorias = categorias || [];
    AppData.produtos = produtos || [];
  } catch (error) {
    console.error(
      "ERRO GRAVE: Falha ao carregar dados estáticos iniciais. O servidor pode estar fora do ar.",
      error
    );

    AppData.empresa = {};
    AppData.parametros = {};
    AppData.horarios = [];
    AppData.categorias = [];
    AppData.produtos = [];
  }
}

document.addEventListener("DOMContentLoaded", async () => {
  const dadosSessaoCompleta = await verificacaoDaSessao();

  AppData.sessao = dadosSessaoCompleta;

  if (window.location.pathname.endsWith("/index.html")) {
    await carregarDadosIniciais();

    const foneDoUsuario = AppData.sessao?.usuario?.telefone ?? null;

    gerenciarInfoEmpresa(AppData.empresa, AppData.parametros);
    gerenciarCategoriasMercadorias(AppData.categorias, AppData.produtos);
    gerenciarAside(AppData.empresa, AppData.horarios, AppData.parametros);

    gerenciarPedidosAnteriores(foneDoUsuario);
  }

  if (window.location.pathname.endsWith("/selecionar.html")) {
    gerenciarProdutoSelecionado();
  }

  if (window.location.pathname.endsWith("/carrinho.html")) {
    gerenciarCarrinho();
  }

  if (window.location.pathname.endsWith("/finalizar.html")) {
    gerenciarFinalizacao(dadosSessaoCompleta);
  }
});
